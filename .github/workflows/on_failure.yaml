name: Revert Workflow

on:  
  workflow_run:
    workflows: 
      - Update Target Branch Passive Cluster(subworkflow1)
      - Update Target Group(subworkflow2)
      - Merge To Master(subworkflow3)
    types: [completed]
    
permissions: write-all    
    
env:
  GH_TOKEN: ${{ secrets.GH_PAT }}

jobs:
  approval_to_revert_changes:
    runs-on: ["self-hosted", "bg-deployment"]
    if: ${{ (github.event.workflow_run.conclusion == 'failure' || github.event.workflow_run.conclusion == 'cancelled' || github.event.workflow.name == 'Merge To Master(subworkflow3)') && github.event.workflow_run.conclusion != 'skipped' }}
    environment: 'DEV-BLUE-GREEN'
    steps:
      - name: Waiting for Approval
        run: |
          echo "Waiting for Approval"

  set_config:
    runs-on: ["self-hosted", "bg-deployment"]
    needs: [approval_to_revert_changes]
    outputs:
      regions-list: ${{ steps.environment.outputs.regions-list }}  
      ENV_VAR: ${{ steps.environment-var.outputs.ENV_VAR }}    
      TARGET_BRANCH: ${{ steps.environment-var.outputs.TARGET_BRANCH }}   
    steps:
      - name: Download artifact
        uses: actions/github-script@v6
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "inputdata"
            })[0];
            let download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: matchArtifact.id,
                archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(${process.env.GITHUB_WORKSPACE}/inputdata.zip, Buffer.from(download.data));
            
      - name: Set variables
        id: environment-var
        run: |-
          unzip inputdata.zip
          echo "ENV_VAR=$(cat environment)" >> "$GITHUB_OUTPUT"
          echo "TARGET_BRANCH=$(cat targetbranch)" >> "$GITHUB_OUTPUT"

      - name: Set Output Variables
        id: environment
        run: |
          if [ $(cat environment) == "dev" ]; then
            REGIONS='
              {"region_code": "use1" ,"region": "us-east-1"},
              {"region_code": "euw1" ,"region": "eu-west-1"},
            '
          elif [ $(cat environment) == "qa" ]; then
            REGIONS='
              {"region_code": "euw1" ,"region": "eu-west-1"},
            '
          elif [ $(cat environment) == "prod" ]; then
            REGIONS='
              {"region_code": "apse3" ,"region": "ap-southeast-3"},
              {"region_code": "mec1" ,"region": "me-central-1"},
              {"region_code": "apse2" ,"region": "ap-southeast-2"},
              {"region_code": "apse1" ,"region": "ap-southeast-1"},
              {"region_code": "usw2" ,"region": "us-west-2"},
              {"region_code": "use1" ,"region": "us-east-1"},
              {"region_code": "euc1" ,"region": "eu-central-1"},
              {"region_code": "euw1" ,"region": "eu-west-1"},
            '
          fi
          echo ::set-output name=regions-list::{\"include\":[$REGIONS]}

  sw1_revert:
    runs-on: ["self-hosted", "bg-deployment"]
    needs: [set_config, approval_to_revert_changes]
    strategy:
      max-parallel: 8
      matrix: ${{ fromJson(needs.set_config.outputs.regions-list) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: master

      - name: Switching Argocd target branch
        env:
          KUBE_HOST: ${{ needs.set_config.outputs.ENV_VAR }}_${{ matrix.region_code }}_C2_HOST
          AUTHORIZATION_TOKEN: ${{ needs.set_config.outputs.ENV_VAR }}_${{ matrix.region_code }}_C2_TOKEN
        run: |-
          KUBE_HOST=${{ secrets[env.KUBE_HOST] }}
          AUTHORIZATION_TOKEN=${{ secrets[env.AUTHORIZATION_TOKEN] }}
          python3 scripts/blue-green-deployment/argo_target_update.py update_app_set master
          python3 scripts/blue-green-deployment/argo_target_update.py update_associate_apps master
          python3 scripts/blue-green-deployment/argo_target_update.py restart_gateway_pods nexmo-gloo

  sw2_revert:
    runs-on: ["self-hosted", "bg-deployment"]
    needs: [set_config, approval_to_revert_changes]
    strategy:
      max-parallel: 8
      matrix: ${{ fromJson(needs.set_config.outputs.regions-list) }}
    if: ${{ github.event.workflow.name == 'Update Target Group(subworkflow2)' || github.event.workflow.name == 'Merge To Master(subworkflow3)' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: master

      - name: Add target group to loadbalancer
        run: |
            python scripts/blue-green-deployment/add_tg_to_lb.py -e ${{ needs.set_config.outputs.ENV_VAR }} -r ${{ matrix.region }} -tg tg1
        continue-on-error: true

      - name: Update tg weights
        run: |
            python scripts/blue-green-deployment/change_tgs_weights.py -e ${{ needs.set_config.outputs.ENV_VAR }} -r ${{ matrix.region }} -tg1w 100 -tg2w 0
        continue-on-error: true

      - name: Remove unused tg
        run: |
            python scripts/blue-green-deployment/remove_tg_from_lb.py -e ${{ needs.set_config.outputs.ENV_VAR }} -r ${{ matrix.region }} -tg tg2
        continue-on-error: true
      
  unlock_branch:
    runs-on: ["self-hosted", "bg-deployment"]
    needs: [set_config]
    steps:
      - name: Unlock Master and Target Branch
        run: |
          pip3 install jq

          curl -L -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GH_PAT }}" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/Vonage/1vapigw-k8s/branches/test-blue-green-deployment/protection >> branch_protection.json

          jq 'del(.required_status_checks.checks)' branch_protection.json >> input.json
          PROTECTION_PAYLOAD='{
            "required_status_checks": '"$(jq -r '.required_status_checks' input.json)"',
            "required_signatures": '"$(jq -r '.required_signatures.enabled' branch_protection.json)"',
            "enforce_admins": '"$(jq -r '.enforce_admins.enabled' branch_protection.json)"',
            "required_linear_history": '"$(jq -r '.required_linear_history.enabled' branch_protection.json)"',
            "allow_force_pushes": '"$(jq -r '.allow_force_pushes.enabled' branch_protection.json)"',
            "allow_deletions": '"$(jq -r '.allow_deletions.enabled' branch_protection.json)"',
            "block_creations": '"$(jq -r '.block_creations.enabled' branch_protection.json)"',
            "required_conversation_resolution": '"$(jq -r '.required_conversation_resolution.enabled' branch_protection.json)"',
            "lock_branch": false,
            "allow_fork_syncing": '"$(jq -r '.allow_fork_syncing.enabled' branch_protection.json)"',
            "required_pull_request_reviews": '"$(jq -r '.required_pull_request_reviews' branch_protection.json)"',
            "restrictions": '"$(jq -r '.restrictions' branch_protection.json)"'
          }'

          curl -L -X PUT -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GH_PAT }}" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/Vonage/1vapigw-k8s/branches/test-blue-green-deployment/protection -d "$PROTECTION_PAYLOAD"

          curl -L -X DELETE -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GH_PAT }}" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/Vonage/1vapigw-k8s/branches/${{ needs.set_config.outputs.TARGET_BRANCH }}/protection