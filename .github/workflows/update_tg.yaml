name: Update Target Group(subworkflow2)

on:
  workflow_run:
    workflows: 
      - Update Target Branch Passive Cluster(subworkflow1)
    types: [completed]
  workflow_dispatch:
    inputs:
      TARGET_BRANCH:
        description: "Feature branch with updated changes"
        required: true
        type: string
      ENV_VAR:
        description: "Environment on which changes needs to be tested"
        required: true
        type: choice
        options:
          - dev
          - qa
          - prod
      PR_NUMBER:
        description: "PR number which is opened for feature branch."
        required: true
        type: string

jobs:
  validate_inputs:
    runs-on: ["self-hosted", "bg-deployment"]
    if: ${{ github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: Vonage/1vapigw-k8s
          token: ${{ secrets.GH_PAT }}

      - name: Validate Inputs
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          if ! git ls-remote --exit-code origin "${{inputs.TARGET_BRANCH}}"; then
            echo "Branch ${{inputs.TARGET_BRANCH}} is not present."
            exit 1
          fi

          status=$(gh pr list | grep ${{inputs.PR_NUMBER}})
          if [ -z "$status" ]; then
              echo "PR number is invalid"
              exit 1
          fi

          
          if gh pr status -c | grep -A 1 "${{inputs.PR_NUMBER}}" | grep "Not up to date"; then
            echo "PR ${{inputs.PR_NUMBER}} is out-of-date with the base branch"
            exit 1
          fi
          if ! gh pr view ${{inputs.PR_NUMBER}} | grep -q "Approved"; then
            echo "PR ${{inputs.PR_NUMBER}} is not approved"
            exit 1
          fi
          
          if ${{inputs.TARGET_BRANCH }} == "master"; then
            echo "Target branch can't be master"
            exit 1
          fi

      - name: Lock Master and Target Branch
        run: |
          pip3 install jq

          curl -L -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GH_PAT }}" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/Vonage/1vapigw-k8s/branches/test-blue-green-deployment/protection >> branch_protection.json

          jq 'del(.required_status_checks.checks)' branch_protection.json >> input.json
          PROTECTION_PAYLOAD='{
            "required_status_checks": '"$(jq -r '.required_status_checks' input.json)"',
            "required_signatures": '"$(jq -r '.required_signatures.enabled' branch_protection.json)"',
            "enforce_admins": '"$(jq -r '.enforce_admins.enabled' branch_protection.json)"',
            "required_linear_history": '"$(jq -r '.required_linear_history.enabled' branch_protection.json)"',
            "allow_force_pushes": '"$(jq -r '.allow_force_pushes.enabled' branch_protection.json)"',
            "allow_deletions": '"$(jq -r '.allow_deletions.enabled' branch_protection.json)"',
            "block_creations": '"$(jq -r '.block_creations.enabled' branch_protection.json)"',
            "required_conversation_resolution": '"$(jq -r '.required_conversation_resolution.enabled' branch_protection.json)"',
            "lock_branch": true,
            "allow_fork_syncing": '"$(jq -r '.allow_fork_syncing.enabled' branch_protection.json)"',
            "required_pull_request_reviews": '"$(jq -r '.required_pull_request_reviews' branch_protection.json)"',
            "restrictions": '"$(jq -r '.restrictions' branch_protection.json)"'
          }'

          curl -L -X PUT -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GH_PAT }}" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/Vonage/1vapigw-k8s/branches/test-blue-green-deployment/protection -d "$PROTECTION_PAYLOAD"

          curl -L -X PUT -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GH_PAT }}" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/Vonage/1vapigw-k8s/branches/${{ inputs.TARGET_BRANCH }}/protection -d "$PROTECTION_PAYLOAD"

  set_config:
    runs-on: ["self-hosted", "bg-deployment"]
    needs: validate_inputs
    if: ${{ ( always() && needs.validate_inputs.result == 'success' ) || github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Download artifact
        uses: actions/github-script@v6
        if: ${{ github.event_name == 'workflow_run' }}
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "inputdata"
            })[0];
            let download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: matchArtifact.id,
                archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(${process.env.GITHUB_WORKSPACE}/inputdata.zip, Buffer.from(download.data));
        
      - name: Set variables
        id: environment-var
        run: |-
          if [ "${{ github.event_name }}" == "workflow_run" ]; then
            unzip inputdata.zip
            echo "ENV_VAR=$(cat environment)" >> "$GITHUB_OUTPUT"
            echo "TARGET_BRANCH=$(cat targetbranch)" >> "$GITHUB_OUTPUT"
            echo "PR_NUMBER=$(cat pr)" >> "$GITHUB_OUTPUT"
            echo "::set-output name=ENV_VAR_LOCAL::$(cat environment)"
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "ENV_VAR=${{ inputs.ENV_VAR }}" >> "$GITHUB_OUTPUT"
            echo "TARGET_BRANCH=${{ inputs.TARGET_BRANCH }}" >> "$GITHUB_OUTPUT"
            echo "PR_NUMBER=${{ inputs.PR_NUMBER }}" >> "$GITHUB_OUTPUT"
            echo "::set-output name=ENV_VAR_LOCAL::${{ inputs.ENV_VAR }}"
          fi
          
      - name: Set Output Variables
        id: environment
        run: |
          if [ ${{ steps.environment-var.outputs.ENV_VAR_LOCAL }} == "dev" ]; then
            REGIONS='
              {"region": "us-east-1", "sanity": "use1"}, 
              {"region": "eu-west-1", "sanity": "euw1"},
            '
          elif [ ${{ steps.environment-var.outputs.ENV_VAR_LOCAL }} == "qa" ]; then
            REGIONS='
              {"region": "eu-west-1", "sanity": "euw1"},
            '
          elif [ ${{ steps.environment-var.outputs.ENV_VAR_LOCAL }} == "prod" ]; then
            REGIONS='
              {"region": "ap-southeast-3", "sanity": "apse3"},
              {"region": "me-central-1", "sanity": "mec1"},
              {"region": "ap-southeast-2", "sanity": "apse3"},
              {"region": "ap-southeast-1", "sanity": "apse1"},
              {"region": "us-west-2", "sanity": "usw2"},
              {"region": "us-east-1", "sanity": "use1"},
              {"region": "eu-central-1", "sanity": "euc1"},
              {"region": "eu-west-1", "sanity": "euw1"},
              '
          fi
          echo ::set-output name=regions-list::{\"include\":[$REGIONS]}

    outputs:
      regions-list: ${{ steps.environment.outputs.regions-list }}
      ENV_VAR: ${{ steps.environment-var.outputs.ENV_VAR }}
      TARGET_BRANCH: ${{ steps.environment-var.outputs.TARGET_BRANCH }}
      PR_NUMBER: ${{ steps.environment-var.outputs.PR_NUMBER }}

  add_tg:
    runs-on: ["self-hosted", "bg-deployment"]
    needs: set_config
    if: ${{ always() && needs.set_config.result == 'success' }}
    environment: 'DEV-BLUE-GREEN'
    strategy:
      max-parallel: 1
      matrix: ${{ fromJson(needs.set_config.outputs.regions-list) }}
    steps:  
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: master

      - name: Add target group to loadbalancer
        run: |
          python scripts/blue-green-deployment/add_tg_to_lb.py -e ${{ needs.set_config.outputs.ENV_VAR }} -r ${{ matrix.region }} -tg tg2

      - name: Update tg weights
        run: |
          python scripts/blue-green-deployment/change_tgs_weights.py -e ${{ needs.set_config.outputs.ENV_VAR }} -r ${{ matrix.region }} -tg1w 0 -tg2w 100

  remove_tg:
    runs-on: ["self-hosted", "bg-deployment"]
    needs: [set_config,add_tg]
    if: ${{ always() && needs.add_tg.result == 'success' }}
    environment: 'DEV-BLUE-GREEN'
    strategy:
      matrix: ${{ fromJson(needs.set_config.outputs.regions-list) }}
    steps:  
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: master

      - name: Remove unused tg
        run: |
          python scripts/blue-green-deployment/remove_tg_from_lb.py -e ${{ needs.set_config.outputs.ENV_VAR }} -r ${{ matrix.region }} -tg tg1

      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: Vonage/1vapigw-k8s
          token: ${{ secrets.GH_PAT }}
          path: k8s

      - name: Run Sanity Tests
        continue-on-error: true
        run: |-
          cd k8s/utils
          bash run-tests.sh ${{ needs.set_config.outputs.ENV_VAR }} ${{ matrix.sanity }} 2

  approval_to_trigger_workflow3:
    runs-on: ["self-hosted", "bg-deployment"]
    needs: remove_tg
    if: ${{ always() && needs.remove_tg.result == 'success' }}
    environment: 'DEV-BLUE-GREEN'
    steps:
      - name: Waiting for Approval
        run: |
          echo "Waiting for Approval"

  save_data:
    runs-on: ["self-hosted", "bg-deployment"]
    needs: set_config
    if: ${{ always() && needs.set_config.result == 'success' }}
    steps:
      - name: Save data
        run: |
          mkdir -p ./data
          echo ${{ needs.set_config.outputs.TARGET_BRANCH }} > ./data/targetbranch
          echo ${{ needs.set_config.outputs.ENV_VAR }} > ./data/environment
          echo ${{ needs.set_config.outputs.PR_NUMBER }} > ./data/pr
      - uses: actions/upload-artifact@v4
        with:
          name: inputdata
          path: data/